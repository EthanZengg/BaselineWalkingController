name: Docker image of BaselineWalkingController

on:
  push:
    branches:
      - master

jobs:

  build-and-push-docker:
    if: github.repository_owner== 'isri-aist' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    env:
      IMAGE_NAME: ghcr.io/isri-aist/baseline_walking_controller
      IMAGE_TAG: latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          path: BaselineWalkingController
      - name: Docker version
        run: docker version
      - name: Build docker image
        run: |
          cd ${GITHUB_WORKSPACE}/BaselineWalkingController/.github/workflows/
          docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
      - name: Docker images
        run: docker images
      - name: Login to registries
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u isri-aist --password-stdin
      - name: Push to GitHub Packages
        run: |
          docker push ${IMAGE_NAME}:${IMAGE_TAG}

  test-simulation-on-docker:
    if: github.repository_owner== 'isri-aist' && github.ref == 'refs/heads/master'
    needs: build-and-push-docker
    strategy:
      fail-fast: false
      matrix:
        mpc-method: [PreviewControlZmp, DdpZmp]
        mpc-framework: [OnlineMpc, OfflineMpc]
        motion-type: [WalkingOnPlain, WalkingOnStairs]
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/mmurooka/baseline_walking_controller:latest
    env:
      HOME: /root
      RESULTS_POSTFIX: ${{ matrix.mpc-method }}-${{ matrix.mpc-framework }}-${{ matrix.motion-type }}
    steps:
      - name: Run simulation
        shell: bash
        run: |
          set -e
          . ${HOME}/catkin_ws/devel/setup.bash
          set -x
          export DISPLAY=":1"
          Xvfb ${DISPLAY} -screen 0 1920x1080x24 &
          sleep 10s
          fluxbox 2> /dev/null &
          mkdir -p ${HOME}/.config/mc_rtc/controllers
          cp ${HOME}/catkin_ws/src/isri-aist/BaselineWalkingController/etc/mc_rtc.yaml ${HOME}/.config/mc_rtc
          CI_DIR=${HOME}/catkin_ws/src/isri-aist/BaselineWalkingController/.github/workflows
          python3 ${CI_DIR}/scripts/mergeConfigs.py ${CI_DIR}/config/${{ matrix.mpc-method }}.yaml ${CI_DIR}/config/${{ matrix.mpc-framework }}.yaml ${CI_DIR}/config/${{ matrix.motion-type }}.yaml > ${HOME}/.config/mc_rtc/controllers/BaselineWalkingController.yaml
          ffmpeg -y -f x11grab -s 1920x1080 -r 30 -i ${DISPLAY} -qscale 0 -vcodec huffyuv /tmp/video.avi > /dev/null 2>&1 < /dev/null &
          FFMPEG_PID=$!
          cd /usr/share/hrpsys/samples/JVRC1
          ./clear-omninames.sh
          if [ "${{ matrix.motion-type }}" == "WalkingOnPlain" ]; then
            CNOID_FILE=sim_mc.cnoid
          else
            CNOID_FILE=sim_mc_comanoid_staircase.cnoid
          fi
          choreonoid --start-simulation ${CNOID_FILE} &
          CNOID_PID=$!
          sleep 40s
          kill -2 ${CNOID_PID}
          kill -2 ${FFMPEG_PID}
          sleep 10s
          mkdir -p /tmp/results
          ffmpeg -i /tmp/video.avi /tmp/results/BWC-video-${RESULTS_POSTFIX}.mp4
          LOG_FILENAME=BWC-log-${RESULTS_POSTFIX}
          mv `readlink -f /tmp/mc-control-BaselineWalkingController-latest.bin` /tmp/${LOG_FILENAME}.bin
          tar czf /tmp/results/${LOG_FILENAME}.tar.gz -C /tmp ${LOG_FILENAME}.bin
      - name: Upload simulation data
        uses: actions/upload-artifact@v3
        with:
          name: BWC-docker-results
          path: /tmp/results
      - name: Check simulation results
        shell: bash
        run: |
          set -e
          set -x
          # Workaround for https://github.com/jrl-umi3218/mc_rtc/issues/281
          sudo sed -i "s/matplotlib.use('Qt5Agg')/# matplotlib.use('Qt5Agg')/g" /usr/lib/python3/dist-packages/mc_log_ui/mc_log_types.py
          # Workaround to achieve allow-failure
          if [ "${{ matrix.motion-type }}" == "WalkingOnPlain" ] && [ "${{ matrix.mpc-framework }}" == "OnlineMpc" ]; then
            ALLOW_FAILURE=true
          else
            ALLOW_FAILURE=false
          fi
          echo "- ALLOW_FAILURE: ${ALLOW_FAILURE}"
          python3 ${HOME}/catkin_ws/src/isri-aist/BaselineWalkingController/.github/workflows/scripts/checkSimulationResults.py /tmp/BWC-log-${RESULTS_POSTFIX}.bin || ${ALLOW_FAILURE}
