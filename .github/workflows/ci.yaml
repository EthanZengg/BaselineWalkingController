name: Building and testing BaselineWalkingController

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  schedule:
    - cron: '0 0 * * 0'

jobs:

  clang-format:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
      - name: Install clang-format-10
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install clang-format-10
      - name: Run clang-format-check
        run: |
          ./.clang-format-check.sh

  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04]
        build-type: [RelWithDebInfo, Debug]
        mc-rtc-version: [head, stable]
        exclude:
          - build-type: Debug
            mc-rtc-version: stable
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set ROS version
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-20.04" ]
          then
            echo "ROS_DISTRO=noetic" >> $GITHUB_ENV
            echo "PYTHON_PACKAGE_PREFIX=python3" >> $GITHUB_ENV
          else
            echo "ROS_DISTRO=melodic" >> $GITHUB_ENV
            echo "PYTHON_PACKAGE_PREFIX=python" >> $GITHUB_ENV
          fi
      - name: Install ROS
        run: |
          set -e
          set -x
          sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
          wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
          sudo apt-get update -qq
          sudo apt-get install -qq ros-${ROS_DISTRO}-ros-base ${PYTHON_PACKAGE_PREFIX}-catkin-tools ${PYTHON_PACKAGE_PREFIX}-rosdep doxygen graphviz
      - name: Install mc_rtc
        run: |
          set -e
          set -x
          curl -1sLf 'https://dl.cloudsmith.io/public/mc-rtc/${{ matrix.mc-rtc-version }}/setup.deb.sh' | sudo -E bash
          sudo apt install -qq libmc-rtc-dev mc-rtc-utils ros-${ROS_DISTRO}-mc-rtc-plugin libeigen-qld-dev
      - name: Setup catkin workspace
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/catkin_ws/src/
          cd ${GITHUB_WORKSPACE}/catkin_ws
          set +x
          . /opt/ros/${ROS_DISTRO}/setup.bash
          set -x
          catkin init
          catkin build --limit-status-rate 0.1
      - name: Checkout repository code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          path: catkin_ws/src/BaselineWalkingController
      - name: Checkout QpSolverCollection
        uses: actions/checkout@v2
        with:
          repository: isri-aist/QpSolverCollection
          submodules: recursive
          path: catkin_ws/src/QpSolverCollection
      - name: Checkout NMPC
        uses: actions/checkout@v2
        with:
          repository: isri-aist/NMPC
          submodules: recursive
          path: catkin_ws/src/NMPC
      - name: Checkout CentroidalControlCollection
        uses: actions/checkout@v2
        with:
          repository: isri-aist/CentroidalControlCollection
          submodules: recursive
          path: catkin_ws/src/CentroidalControlCollection
      - name: Rosdep install
        run: |
          set -e
          set -x
          cd ${GITHUB_WORKSPACE}/catkin_ws
          set +x
          . devel/setup.bash
          set -x
          sudo rosdep init
          rosdep update
          rosdep install -y -r --from-paths src --ignore-src
      - name: Catkin build
        run: |
          set -e
          set -x
          cd ${GITHUB_WORKSPACE}/catkin_ws
          set +x
          . devel/setup.bash
          set -x
          catkin build --limit-status-rate 0.1 -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DENABLE_QLD=ON -DINSTALL_DOCUMENTATION=ON
      # - name: Run tests
      #   run: |
      #     set -e
      #     set -x
      #     cd ${GITHUB_WORKSPACE}/catkin_ws
      #     set +x
      #     . devel/setup.bash
      #     set -x
      #     catkin build --limit-status-rate 0.1 --catkin-make-args run_tests -- baseline_walking_controller --no-deps
      #     catkin_test_results --verbose --all build
      - name: Run simulation
        # Only run for one configuration
        if: matrix.os == 'ubuntu-20.04' && matrix.build-type == 'RelWithDebInfo' && matrix.mc-rtc-version == 'head'
        # https://github.com/jrl-umi3218/lipm_walking_controller/blob/b564d655388ae6a6725c504e5c74a62192e58c7c/.github/workflows/build.yml#L64-L92
        run: |
          set -e
          set -x
          sudo apt-get install -qq mc-openrtm jvrc-choreonoid xvfb ffmpeg mesa-utils fluxbox xserver-xorg xserver-xorg-core xserver-xorg-video-all libwayland-egl1-mesa
          set +x
          . ${GITHUB_WORKSPACE}/catkin_ws/devel/setup.bash
          set -x
          export DISPLAY=":1"
          Xvfb $DISPLAY -screen 0 1920x1080x24 &
          sleep 10s
          fluxbox 2> /dev/null &
          mkdir -p ${HOME}/.config/mc_rtc/controllers
          cp ${GITHUB_WORKSPACE}/catkin_ws/src/BaselineWalkingController/etc/mc_rtc.yaml ${HOME}/.config/mc_rtc
          cp ${GITHUB_WORKSPACE}/catkin_ws/src/BaselineWalkingController/.github/workflows/config/BaselineWalkingController.yaml ${HOME}/.config/mc_rtc/controllers/
          pushd .
          ffmpeg -y -f x11grab -s 1920x1080 -r 30 -i $DISPLAY -qscale 0 -vcodec huffyuv video.avi 2> /dev/null &
          FFMPEG_PID=$!
          cd /usr/share/hrpsys/samples/JVRC1
          ./clear-omninames.sh
          choreonoid --start-simulation sim_mc.cnoid &
          CNOID_PID=$!
          popd
          sleep 30s
          kill -2 $CNOID_PID
          kill -2 $FFMPEG_PID
          sleep 10s
          mkdir -p /tmp/simulation_results
          ffmpeg -i video.avi /tmp/simulation_results/video.mp4
          tar czf /tmp/simulation_results/log.tar.gz `readlink -f /tmp/mc-control-BaselineWalkingController-latest.bin`
      - name: Upload simulation data
        # Only run for one configuration
        if: matrix.os == 'ubuntu-20.04' && matrix.build-type == 'RelWithDebInfo' && matrix.mc-rtc-version == 'head'
        uses: actions/upload-artifact@v3
        with:
          name: simulation_results
          path: /tmp/simulation_results
      - name: Check simulation results
        # Only run for one configuration
        if: matrix.os == 'ubuntu-20.04' && matrix.build-type == 'RelWithDebInfo' && matrix.mc-rtc-version == 'head'
        run: |
          set -e
          set -x
          # Workaround for https://github.com/jrl-umi3218/mc_rtc/issues/281
          sudo sed -i "s/matplotlib.use('Qt5Agg')/# matplotlib.use('Qt5Agg')/g" /usr/lib/python3/dist-packages/mc_log_ui/mc_log_types.py
          python3 ${GITHUB_WORKSPACE}/catkin_ws/src/BaselineWalkingController/.github/workflows/scripts/checkSimulationResults.py `readlink -f /tmp/mc-control-BaselineWalkingController-latest.bin`
      - name: Upload documentation
        # Only run for one configuration and on master branch
        if: matrix.os == 'ubuntu-20.04' && matrix.build-type == 'RelWithDebInfo' && matrix.mc-rtc-version == 'head' && github.ref == 'refs/heads/master'
        run: |
          set -e
          set -x
          cd ${GITHUB_WORKSPACE}/catkin_ws/src/BaselineWalkingController
          git config --global user.name "Masaki Murooka"
          git config --global user.email "m-murooka@aist.go.jp"
          git remote set-url origin "https://mmurooka:${{ secrets.CI_TOKEN }}@github.com/isri-aist/BaselineWalkingController"
          git fetch --depth=1 origin gh-pages:gh-pages
          git clean -dfx
          git checkout --quiet gh-pages
          rm -rf doxygen/
          cp -r ${GITHUB_WORKSPACE}/catkin_ws/build/baseline_walking_controller/doc/html/ doxygen
          git add doxygen
          git_status=`git status -s`
          if test -n "$git_status"; then
            git commit --quiet -m "Update Doxygen HTML files from commit ${{ github.sha }}"
            git push origin gh-pages
          else
            echo "Github pages documentation is already up-to-date."
          fi
